class Node:
    def __init__(self, data):
        self.data = data
        self.next = None

# beginning => head
# length
# the tail of the list => None
class CircularSinglyLinkedList:
    def __init__(self):
        self.head = None
        self.tail = None
        self.length = 0

    # pushing to the end of the list
    def insert_at_end(self,data):
        #  Receive a value and make a new node
        new_node = Node(data)

        # if there's no head => empty list, length = 0
        # so set the head and tail to be the new Node
        # and set the tail next to point to the head
        if not self.head:
            self.head = new_node
            self.tail = new_node
            # and set the tail to point to the head [circular]
            self.tail.next = self.head
        
        # else if not empty
        # make the tail point on the new node {the previous tail}
        # then set the tail to be the new node
        # and set the tail to point to the head [circular]
        else:
            self.tail.next = new_node
            self.tail = new_node
            self.tail.next = self.head
        
        # then always increment the length by one
        self.length += 1
        return self
    
    # remove from the end of the list
    def remove_from_end(self):
        # if the list is empty => return None
        if not self.head: 
            return None
        
        # if only one node
        if self.head == self.tail:
            # store it to return after removing
            value = self.head.data
            self.head = None
            self.tail = None
            self.length -= 1
            return value

        # more than one node
        current = self.head
        new_tail = current
        # else loop until reach the tail
        while current.next != self.head:
            new_tail = current
            current = current.next

        value = current.data
        # and set the tail to be the second last node
        self.tail = new_tail
        # then set the next of the second last node => head
        self.tail.next = self.head
        self.length -= 1

        return value
        
    # shifting => remove the head
    def remove_from_start(self):
        # if empty return None
        if not self.head:
            return None
        
        # else store the current head in a variable to return it
        current_head = self.head

        if self.head == self.tail:
            self.head = None
            self.tail = None
        
        else:
            # set the head to be the current head's next property
            self.head = self.head.next
            # Update tail.next to point to new head to maintain circularity
            self.tail.next = self.head

        # decrement the length
        self.length -= 1
        # return the head after remove it
        return current_head.data

    # unshifting => add a new head
    def insert_at_start(self, data):
        # make a new node
        new_node = Node(data)

        if not self.head:
            # List is empty â€” new node becomes head and tail
            self.head = new_node
            self.tail = self.head
            self.tail.next = self.head
        
        # Insert at beginning and update circular link
        else:
            # set this new node next point to the old head
            new_node.next = self.head
            # then set the head to be this new node
            self.head = new_node
            self.tail.next = self.head

        # Always Do THis
        # increment the length
        self.length += 1
        # return the linked list
        return self

    # Get a node based on index
    def get(self, index):
        if index < 0 or index >= self.length:
            return None
        else:
            counter = 0
            current = self.head
            while counter < index:
                current = current.next
                counter += 1
            return current

    # set the node value with a new value
    def set(self, index, data):
        # use the get method ðŸ©·
        found_node = self.get(index)
        #  change it's value
        if found_node:
            found_node.data = data
            return True
        return False
                
    # insert at specific position
    def insert(self, index, data):
        # if invalid index return null
        # if equal the length allow => so push a new node
        if index < 0 or index > self.length:
            return False
        
        # if the index equal the length so add new node at end
        # push
        elif index == self.length:
            self.insert_at_end(data)
            return True
        
        #  if the index is zero so add at first
        # unshift
        elif index == 0:
            self.insert_at_start(data)
            return True
        
        # else implement our insert method
        # we will use the get method, but don't need the index itself
        # I want the previous one
        else:
            prev = self.get(index - 1)
            # make a new node
            new_node = Node(data)
            # make it point the next of the previous
            new_node.next = prev.next
            # and set the previous to point on the new node
            prev.next = new_node
            self.length += 1
            return True

    # remove a specific node
    def remove(self, index):

        # if invalid index return false
        if index < 0 or index >= self.length:
            return None
        # if index is the last one pop it
        elif index == self.length - 1:
            return self.remove_from_end()
        # if the first one shift it
        elif index == 0 :
            return self.remove_from_start()
        else:
            # else get the previous node
            prev = self.get(index - 1)
            # and set the prev next
            # to be the next of the next node
            removed = prev.next
            prev.next = prev.next.next
            # prev.next = removed.next
            self.length -= 1
            return removed.val

    # traversing
    def __str__(self):
        if not self.head:
            return ''

        res = ''
        current = self.head
        while True:
            res += str(current.data) + ' '
            current = current.next
            if current == self.head:
                break
        return res

